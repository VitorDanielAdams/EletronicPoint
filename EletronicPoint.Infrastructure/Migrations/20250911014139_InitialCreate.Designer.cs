// <auto-generated />
using System;
using EletronicPoint.Infrastructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EletronicPoint.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250911014139_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("EletronicPoint.Domain.Entities.AdjustmentRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AdjustmentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ApprovedById")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("char(36)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Status");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "AdjustmentDate");

                    b.HasIndex("UserId", "RequestDate");

                    b.ToTable("AdjustmentRequests", (string)null);
                });

            modelBuilder.Entity("EletronicPoint.Domain.Entities.AdjustmentRequestEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdjustmentId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("EntryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<TimeSpan>("EntryTime")
                        .HasColumnType("time(6)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("char(36)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<int?>("WorkShiftPeriodId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdjustmentId");

                    b.HasIndex("TenantId");

                    b.HasIndex("WorkShiftPeriodId");

                    b.ToTable("AdjustmentRequestEntries", (string)null);
                });

            modelBuilder.Entity("EletronicPoint.Domain.Entities.OvertimeRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("ApprovalDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ApprovedById")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time(6)");

                    b.Property<DateTimeOffset>("OvertimeDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTimeOffset>("RequestDate")
                        .HasColumnType("datetime(6)");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("char(36)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Status");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "EndTime");

                    b.HasIndex("UserId", "OvertimeDate");

                    b.HasIndex("UserId", "RequestDate");

                    b.HasIndex("UserId", "StartTime");

                    b.ToTable("OvertimeRequests", (string)null);
                });

            modelBuilder.Entity("EletronicPoint.Domain.Entities.TimeSheet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("TotalBreakHours")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TotalHours")
                        .HasPrecision(4, 2)
                        .HasColumnType("decimal(4,2)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId", "Date")
                        .IsUnique();

                    b.ToTable("TimeSheets", (string)null);
                });

            modelBuilder.Entity("EletronicPoint.Domain.Entities.TimeSheetEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("EntryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<TimeSpan>("EntryTime")
                        .HasColumnType("time(6)");

                    b.Property<string>("EntryType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("char(36)");

                    b.Property<int>("TimeSheetId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<int?>("WorkShiftPeriodId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntryType");

                    b.HasIndex("TenantId");

                    b.HasIndex("WorkShiftPeriodId");

                    b.HasIndex("TimeSheetId", "EntryTime");

                    b.ToTable("TimeSheetEntries", (string)null);
                });

            modelBuilder.Entity("EletronicPoint.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("char(36)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("WorkShiftId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("Role");

                    b.HasIndex("TenantId");

                    b.HasIndex("WorkShiftId");

                    b.HasIndex("TenantId", "Email")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("EletronicPoint.Domain.Entities.WorkShift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BreakMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("char(36)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("WorkShifts", (string)null);
                });

            modelBuilder.Entity("EletronicPoint.Domain.Entities.WorkShiftPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time(6)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("char(36)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("WorkShiftId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("WorkShiftId", "Order");

                    b.ToTable("WorkShiftPeriods", (string)null);
                });

            modelBuilder.Entity("EletronicPoint.Domain.Entities.AdjustmentRequest", b =>
                {
                    b.HasOne("EletronicPoint.Domain.Entities.User", "User")
                        .WithMany("AdjustmentRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EletronicPoint.Domain.Entities.AdjustmentRequestEntry", b =>
                {
                    b.HasOne("EletronicPoint.Domain.Entities.AdjustmentRequest", "Adjustment")
                        .WithMany("Entries")
                        .HasForeignKey("AdjustmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EletronicPoint.Domain.Entities.WorkShiftPeriod", "WorkShiftPeriod")
                        .WithMany("AdjustmentEntries")
                        .HasForeignKey("WorkShiftPeriodId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Adjustment");

                    b.Navigation("WorkShiftPeriod");
                });

            modelBuilder.Entity("EletronicPoint.Domain.Entities.OvertimeRequest", b =>
                {
                    b.HasOne("EletronicPoint.Domain.Entities.User", "User")
                        .WithMany("OvertimeRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EletronicPoint.Domain.Entities.TimeSheet", b =>
                {
                    b.HasOne("EletronicPoint.Domain.Entities.User", "User")
                        .WithMany("TimeSheets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EletronicPoint.Domain.Entities.TimeSheetEntry", b =>
                {
                    b.HasOne("EletronicPoint.Domain.Entities.TimeSheet", "TimeSheet")
                        .WithMany("Entries")
                        .HasForeignKey("TimeSheetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EletronicPoint.Domain.Entities.WorkShiftPeriod", "WorkShiftPeriod")
                        .WithMany("Entries")
                        .HasForeignKey("WorkShiftPeriodId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("TimeSheet");

                    b.Navigation("WorkShiftPeriod");
                });

            modelBuilder.Entity("EletronicPoint.Domain.Entities.User", b =>
                {
                    b.HasOne("EletronicPoint.Domain.Entities.WorkShift", "WorkShift")
                        .WithMany("Users")
                        .HasForeignKey("WorkShiftId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("WorkShift");
                });

            modelBuilder.Entity("EletronicPoint.Domain.Entities.WorkShiftPeriod", b =>
                {
                    b.HasOne("EletronicPoint.Domain.Entities.WorkShift", "WorkShift")
                        .WithMany("Periods")
                        .HasForeignKey("WorkShiftId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("WorkShift");
                });

            modelBuilder.Entity("EletronicPoint.Domain.Entities.AdjustmentRequest", b =>
                {
                    b.Navigation("Entries");
                });

            modelBuilder.Entity("EletronicPoint.Domain.Entities.TimeSheet", b =>
                {
                    b.Navigation("Entries");
                });

            modelBuilder.Entity("EletronicPoint.Domain.Entities.User", b =>
                {
                    b.Navigation("AdjustmentRequests");

                    b.Navigation("OvertimeRequests");

                    b.Navigation("TimeSheets");
                });

            modelBuilder.Entity("EletronicPoint.Domain.Entities.WorkShift", b =>
                {
                    b.Navigation("Periods");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("EletronicPoint.Domain.Entities.WorkShiftPeriod", b =>
                {
                    b.Navigation("AdjustmentEntries");

                    b.Navigation("Entries");
                });
#pragma warning restore 612, 618
        }
    }
}
